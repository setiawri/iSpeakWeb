@model iSpeak.Models.TutorStudentSchedulesModels

@{
    ViewBag.Root = "Student Schedules";
    ViewBag.Title = "Create";
}

<div class="content-wrapper">

    <!-- Content area -->
    <div class="content">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <!-- Form inputs -->
            <div class="card">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title">@ViewBag.Root</h5>
                    <div class="header-elements">
                        <div class="list-icons">
                            <a class="list-icons-item" data-action="collapse"></a>
                            <a class="list-icons-item" data-action="reload"></a>
                            <a class="list-icons-item" data-action="remove"></a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <fieldset class="mb-3">
                        <legend class="text-uppercase font-size-sm font-weight-bold">@ViewBag.Title</legend>
                        <div class="form-group row">
                            <div class="col-lg-12">
                                @Html.ValidationMessage("Exist", "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Student_UserAccounts_Id, htmlAttributes: new { @class = "col-form-label col-lg-2" })
                            <div class="col-lg-5">
                                <select class="form-control" id="Student_UserAccounts_Id" name="Student_UserAccounts_Id"></select>
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessageFor(model => model.Student_UserAccounts_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Tutor_UserAccounts_Id, htmlAttributes: new { @class = "col-form-label col-lg-2" })
                            <div class="col-lg-5">
                                <select class="form-control" id="Tutor_UserAccounts_Id" name="Tutor_UserAccounts_Id"></select>
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessageFor(model => model.Tutor_UserAccounts_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.InvoiceItems_Id, htmlAttributes: new { @class = "col-form-label col-lg-2" })
                            <div class="col-lg-5">
                                @Html.DropDownListFor(model => model.InvoiceItems_Id, new SelectList(""), "Select Lesson", new { @class = "form-control select2" })
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessageFor(model => model.InvoiceItems_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-lg-2">Schedule</label>
                            <div class="col-lg-5">
                                <div class="row">
                                    <div class="col-lg-4">
                                        @Html.EnumDropDownListFor(model => model.DayOfWeek, new { @class = "form-control select2" })
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="input-group">
                                            <span class="input-group-prepend">
                                                <span class="input-group-text">Start</span>
                                            </span>
                                            <input type="text" class="form-control" id="StartTime" name="StartTime" value="08:00">
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="input-group">
                                            <span class="input-group-prepend">
                                                <span class="input-group-text">End</span>
                                            </span>
                                            <input type="text" class="form-control" id="EndTime" name="EndTime" value="12:00">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessage("Schedule", "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "col-form-label col-lg-2" })
                            <div class="col-lg-5">
                                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div>
                            <a href="@Url.Action("StudentIndex", "Schedules")" class="btn btn-warning">Cancel <i class="icon-cross2 ml-2"></i></a>
                            <button type="submit" class="btn btn-primary">Submit <i class="icon-paperplane ml-2"></i></button>
                        </div>
                        <hr />
                        <div class="form-group row">
                            <label class="col-lg-2">Schedule List</label>
                            <div class="col-lg-10">
                                <div class="table-responsive">
                                    <table class="table table-condensed">
                                        <thead>
                                            <tr>
                                                <th>Day of Week</th>
                                                <th>Time</th>
                                                <th>Lesson</th>
                                                <th>Tutor</th>
                                                <th>Notes</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody id="data-body"></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                </div>
            </div>
            <!-- /form inputs -->
        }
    </div>
    <!-- /content area -->

</div>

<script type="text/javascript">
    function GetStudentSchedule() {
        $("#InvoiceItems_Id").empty();
        $("#InvoiceItems_Id").append("<option value=''>Select Lesson</option");
        $('#data-body').empty();

        if ($('#Student_UserAccounts_Id').val() != '') {
            //Lesson Available
            $.get('@Url.Action("GetLessonList", "LessonSessions")', { student_id: $("#Student_UserAccounts_Id").val() }, function (data) {
                $.each(data.ddl, function (index, row) {
                    $("#InvoiceItems_Id").append("<option value='" + row.Value + "'>" + row.Text + "</option>")
                });
            });

            //Schedule List
            $.ajax({
                type: "POST",
                url: '@Url.Action("GetStudentSchedule", "Schedules")',
                data: {
                    student_id: $('#Student_UserAccounts_Id').val(),
                    tutor_id: $('#Tutor_UserAccounts_Id').val()
                },
                async: false,
                error: function (result) {
                    bootbox.alert("Error " + result);
                    return false;
                }, //end error
                success: function (data) {
                    //console.log(data);
                    $('#data-body').append(data.body);
                } //end success
            }); //end ajax
        }
    }

    function DeleteSchedule(id, student, dow, time) {
        bootbox.confirm({
            message: "Are you sure want to delete schedule " + student + ": " + dow + " (" + time + ") ?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result == true) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("DeleteSchedule", "Schedules")',
                        data: {
                            id: id,
                            key: 'student'
                        },
                        success: function (data) {
                            GetStudentSchedule();
                        }, //end success
                        error: function (result) {
                            bootbox.alert("Error " + result);
                        } //end error
                    }); //end ajax
                }
            }
        });
    }

    $(document).ready(function () {
        $('.select2').select2();

        $('#StartTime,#EndTime').AnyTime_picker({
            format: '%H:%i'
        });

        $('#Tutor_UserAccounts_Id').select2({
            placeholder: 'Select Tutor',
            ajax: {
                url: '@Url.Action("GetUser", "User")',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        limit: 20,
                        role: 'tutor'
                    }

                    return query;
                }
            },
            //minimumInputLength: 2
        });

        $('#Student_UserAccounts_Id').select2({
            placeholder: 'Select Student',
            ajax: {
                url: '@Url.Action("GetUser", "User")',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        limit: 20,
                        role: 'student'
                    }

                    return query;
                }
            },
            //minimumInputLength: 2
        });

        $('#Student_UserAccounts_Id').change(function () {
            GetStudentSchedule();
        });

        $('#Tutor_UserAccounts_Id').change(function () {
            GetStudentSchedule();
        });

        @*if ('@ViewBag.Error' != '') {
            $('#StartTime').val('@ViewBag.StartTime');
            $('#EndTime').val('@ViewBag.EndTime');
        }*@

        $('#DayOfWeek').val('@ViewBag.DOW').trigger('change');
        $('#StartTime').val('@ViewBag.StartTime');
        $('#EndTime').val('@ViewBag.EndTime');

        if (('@ViewBag.Error' == 'init' && '@ViewBag.StudentName' != '') || ('@ViewBag.Error' == 'duplicate_schedule' && '@ViewBag.StudentName' != '') || ('@ViewBag.Error' == 'invalid_time' && '@ViewBag.StudentName' != '')) {
            var $newOption = $("<option selected='selected'></option>").val('@ViewBag.StudentId').text('@ViewBag.StudentName');
            $("#Student_UserAccounts_Id").append($newOption).trigger('change');
        }

        if ('@ViewBag.Error' == 'tutor' && '@ViewBag.TutorName' != '') {
            var $newOption = $("<option selected='selected'></option>").val('@ViewBag.TutorId').text('@ViewBag.TutorName');
            $("#Tutor_UserAccounts_Id").append($newOption).trigger('change');
        }

    });
</script>