@model iSpeak.Models.TutorSchedulesModels

@{
    ViewBag.Root = "Tutor Schedules";
    ViewBag.Title = "Create";
}

<div class="content-wrapper">

    <!-- Content area -->
    <div class="content">
        @using (Html.BeginForm("TutorCreate", "Schedules", FormMethod.Post, new { id = "target" }))
        {
            @Html.AntiForgeryToken()
            <!-- Form inputs -->
            <div class="card">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title">@ViewBag.Root</h5>
                    <div class="header-elements">
                        <div class="list-icons">
                            <a class="list-icons-item" data-action="collapse"></a>
                            <a class="list-icons-item" data-action="reload"></a>
                            <a class="list-icons-item" data-action="remove"></a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <fieldset class="mb-3">
                        <legend class="text-uppercase font-size-sm font-weight-bold">@ViewBag.Title</legend>
                        <div class="form-group row">
                            <div class="col-lg-12">
                                @Html.ValidationMessage("Exist", "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Tutor_UserAccounts_Id, htmlAttributes: new { @class = "col-form-label col-lg-2" })
                            <div class="col-lg-5">
                                <select class="form-control" id="Tutor_UserAccounts_Id" name="Tutor_UserAccounts_Id"></select>
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessageFor(model => model.Tutor_UserAccounts_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label class="col-form-label col-lg-2">Schedule</label>
                            <div class="col-lg-5">
                                <div class="row">
                                    <div class="col-lg-4">
                                        @Html.EnumDropDownListFor(model => model.DayOfWeek, new { @class = "form-control select2" })
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="input-group">
                                            <span class="input-group-prepend">
                                                <span class="input-group-text">Start</span>
                                            </span>
                                            <input type="text" class="form-control" id="StartTime" name="StartTime" value="08:00">
                                        </div>
                                    </div>
                                    <div class="col-lg-4">
                                        <div class="input-group">
                                            <span class="input-group-prepend">
                                                <span class="input-group-text">End</span>
                                            </span>
                                            <input type="text" class="form-control" id="EndTime" name="EndTime" value="12:00">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessage("Schedule", "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "col-form-label col-lg-2" })
                            <div class="col-lg-5">
                                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            <div class="col-lg-5">
                                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <hr />
                        <div class="form-group row">
                            <label class="col-lg-2">Schedule List</label>
                            <div class="col-lg-7">
                                <div class="table-responsive">
                                    <table class="table table-condensed">
                                        <thead>
                                            <tr>
                                                <th>Day of Week</th>
                                                <th>Time</th>
                                                <th>Notes</th>
                                            </tr>
                                        </thead>
                                        <tbody id="data-body"></tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <div>
                        <a href="@Url.Action("TutorIndex", "Schedules")" class="btn btn-warning">Cancel <i class="icon-cross2 ml-2"></i></a>
                        <button type="submit" class="btn btn-primary">Submit <i class="icon-paperplane ml-2"></i></button>
                    </div>
                </div>
            </div>
            <!-- /form inputs -->
        }
    </div>
    <!-- /content area -->

</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('.select2').select2();

        $('#StartTime,#EndTime').AnyTime_picker({
            format: '%H:%i'
        });

        $('#Tutor_UserAccounts_Id').select2({
            placeholder: 'Select Tutor',
            ajax: {
                url: '@Url.Action("GetUser", "User")',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        limit: 20,
                        role: 'tutor'
                    }

                    return query;
                }
            },
            //minimumInputLength: 2
        });

        $('#Tutor_UserAccounts_Id').change(function () {
            $('#data-body').empty();
            if ($('#Tutor_UserAccounts_Id').val() != '') {
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("GetTutorSchedule", "Schedules")',
                    data: {
                        tutor_id: $('#Tutor_UserAccounts_Id').val()
                    },
                    async: false,
                    error: function (result) {
                        bootbox.alert("Error " + result);
                        return false;
                    }, //end error
                    success: function (data) {
                        //console.log(data);
                        $('#data-body').append(data.body);
                    } //end success
                }); //end ajax
            }
        });

        console.log('@ViewBag.Error');
        console.log('@ViewBag.TutorName');
        console.log('@ViewBag.TutorId');
        console.log('@ViewBag.FullAccess');
        console.log('@ViewBag.LoginId');

        if ('@ViewBag.Error' != '') {
            $('#StartTime').val('@ViewBag.StartTime');
            $('#EndTime').val('@ViewBag.EndTime');
        }

        if (('@ViewBag.Error' == 'init' && '@ViewBag.TutorName' != '') || ('@ViewBag.Error' == 'duplicate_schedule' && '@ViewBag.TutorName' != '') || ('@ViewBag.Error' == 'invalid_time' && '@ViewBag.TutorName' != '')) {
            var $newOption = $("<option selected='selected'></option>").val('@ViewBag.TutorId').text('@ViewBag.TutorName');
            $("#Tutor_UserAccounts_Id").append($newOption).trigger('change');
        }

        if ('@ViewBag.FullAccess' == 'False') {
            if ('@ViewBag.Error' == '') {
                var $newOption = $("<option selected='selected'></option>").val('@ViewBag.LoginId').text('@ViewBag.LoginFullName');
                $("#Tutor_UserAccounts_Id").append($newOption).trigger('change');
            }
            document.getElementById('Tutor_UserAccounts_Id').disabled = true;
        }

        $('#target').submit(function (e) {
            document.getElementById('Tutor_UserAccounts_Id').disabled = false;
        });
        
    });
</script>