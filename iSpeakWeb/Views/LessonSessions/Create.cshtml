@model iSpeak.Models.LessonSessionsModels

@{
    ViewBag.Root = "Lesson Sessions";
    ViewBag.Title = "Create";
}

<div class="content-wrapper">

    <!-- Content area -->
    <div class="content">
        @using (Html.BeginForm("Create", "LessonSessions", FormMethod.Post, new { id = "target" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" id="Items" name="Items" />
            <input type="hidden" id="ChangeSchedule" name="ChangeSchedule" />
            <input type="hidden" id="Waive" name="Waive" />
            <!-- Form inputs -->
            <div class="card">
                <div class="card-header header-elements-inline">
                    <h5 class="card-title">@ViewBag.Root</h5>
                    <div class="header-elements">
                        <div class="list-icons">
                            <a class="list-icons-item" data-action="collapse"></a>
                            <a class="list-icons-item" data-action="reload"></a>
                            <a class="list-icons-item" data-action="remove"></a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <fieldset class="mb-3">
                        <legend class="text-uppercase font-size-sm font-weight-bold">@ViewBag.Title</legend>
                        <label class="session-validation text-danger" style="display: none"></label>
                        @Html.ValidationMessage("ErrorHours", "", new { @class = "text-danger" })
                        <div class="form-group row" style="display: none">
                            @Html.LabelFor(model => model.Branches_Id, htmlAttributes: new { @class = "col-form-label col-lg-2" })
                            <div class="col-lg-6">
                                @Html.DropDownListFor(model => model.Branches_Id, ViewBag.listBranch as SelectList, "Select Branch", new { @class = "form-control select2" })
                            </div>
                            <div class="col-lg-4">
                                @Html.ValidationMessageFor(model => model.Branches_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-md-2">
                                <div class="form-check mt-1">
                                    <label class="form-check-label">
                                        <input type="checkbox" id="chkChangeSchedule" class="check-styled-info" onclick="CallChangeSchedule()" data-fouc>
                                        Change Schedule
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <span class="badge badge-light badge-striped badge-striped-left border-left-info mt-1">Set session hours to 0 and no Tutor fee.</span>
                            </div>
                            <div class="col-md-2">
                                <div class="form-check mt-1">
                                    <label class="form-check-label">
                                        <input type="checkbox" id="chkWaive" class="check-styled-danger" data-fouc>
                                        Waive Tutor Fee
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <span class="badge badge-light badge-striped badge-striped-left border-left-danger mt-1">Reduce session hours as selected (for expired schedule) and no Tutor fee.</span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Timestamp, htmlAttributes: new { @class = "" })
                                    <div class="input-group">
                                        @Html.EditorFor(model => model.Timestamp, new { htmlAttributes = new { @class = "form-control tanggal" } })
                                        <span class="input-group-append">
                                            <span class="input-group-text"><i class="icon-calendar"></i></span>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Timestamp, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Tutor_UserAccounts_Id, htmlAttributes: new { @class = "" })
                                    @*@Html.DropDownListFor(model => model.Tutor_UserAccounts_Id, ViewBag.listTutor as SelectList, "Select Tutor", new { @class = "form-control select2" })*@
                                    <select class="form-control" id="Tutor_UserAccounts_Id" name="Tutor_UserAccounts_Id"></select>
                                    @Html.ValidationMessageFor(model => model.Tutor_UserAccounts_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label>Hour</label>
                                    <select class="form-control" id="SessionHours" name="SessionHours">
                                        <option value="0.5" selected>0.5 hr</option>
                                        <option value="1">1 hr</option>
                                        <option value="1.5">1.5 hr</option>
                                        <option value="2">2 hr</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <label>Student</label>
                                    @*@Html.DropDownList("Student_Id", ViewBag.listStudent as SelectList, "Select Student", new { @class = "form-control select2" })*@
                                    <select class="form-control" id="Student_Id" name="Student_Id"></select>
                                    @Html.ValidationMessage("Student_Id", "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    <label>Lesson Package</label>
                                    @Html.DropDownListFor(model => model.SaleInvoiceItems_Id, new SelectList(""), "Select Lesson", new { @class = "form-control select2" })
                                    @Html.ValidationMessageFor(model => model.SaleInvoiceItems_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Review, htmlAttributes: new { @class = "" })
                                    @Html.TextAreaFor(model => model.Review, new { @class = "form-control", @rows = 3, @placeholder = "For Student" })
                                </div>
                            </div>
                            <div class="col-md-5">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.InternalNotes, htmlAttributes: new { @class = "" })
                                    @Html.TextAreaFor(model => model.InternalNotes, new { @class = "form-control", @rows = 3, @placeholder = "Only For iSpeak Staff" })
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group">
                                    <label>&nbsp;</label>
                                    <button type="button" class="btn btn-sm btn-success form-control" id="btnAdd">Add Data<i class="icon-plus22 ml-2"></i></button>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <div class="table-responsive">
                                        <table class="table table-sm table-bordered table-striped">
                                            <thead>
                                                <tr class="bg-blue-800">
                                                    <th style="width: 5% !important"></th>
                                                    <th style="width: 20% !important">Student</th>
                                                    <th style="width: 25% !important">Package</th>
                                                    <th style="width: 25% !important">Review</th>
                                                    <th style="width: 25% !important">Internal Notes</th>
                                                </tr>
                                            </thead>
                                            <tbody id="data-body"></tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="row" style="display: none">
                            <div class="col-md-5">
                                <div class="form-group">
                                    @Html.Label("Description", htmlAttributes: new { @class = "" })
                                    @Html.TextArea("Description", new { @class = "form-control", @rows = 3 })
                                </div>
                            </div>
                        </div>
                    </fieldset>
                    <div>
                        <a href="@Url.Action("Index", "LessonSessions")" class="btn btn-warning">Cancel <i class="icon-cross2 ml-2"></i></a>
                        <button type="submit" class="btn btn-primary">Submit <i class="icon-paperplane ml-2"></i></button>
                    </div>
                </div>
            </div>
            <!-- /form inputs -->
        }
    </div>
    <!-- /content area -->

</div>

<script type="text/javascript">
    var item_no = 100;

    function AddItem(student, package_info, review, internal, sale_inv_id) {
        item_no += 1;

        var rowItem = '<tr id="item_' + item_no + '">'
            + '<td align="center" style="vertical-align:middle"><a href="#" onclick="RemoveItem(' + item_no + ')" class="text-danger"><i class="icon-cross icon-2x"></i></a></td>'
            + '<td><input type="text" readonly class="form-control input-xs student" value="' + student + '" /></td>'
            + '<td><input type="text" readonly class="form-control input-xs package" value="' + package_info + '" /></td>'
            + '<td><input type="text" readonly class="form-control input-xs review" value="' + review + '" /></td>'
            + '<td><input type="text" readonly class="form-control input-xs internal" value="' + internal + '" /></td>'
            + '<td style="display: none"><input type="text" readonly class="form-control input-xs sii_id" value="' + sale_inv_id + '" /></td>'
            + '</tr>';
        $('#data-body').append(rowItem);
    }

    function RemoveItem(no) {
        $('#item_' + no).remove();
    }

    function CallChangeSchedule() {
        var nilai = $('#chkChangeSchedule').prop('checked');
        if (nilai == true) {
            document.getElementById('SessionHours').disabled = true;
        }
        else {
            document.getElementById('SessionHours').disabled = false;
        }
    }

    $(document).ready(function () {
        $('.select2').select2();

        $('.check-styled').uniform();
        $('.check-styled-info').uniform({
            wrapperClass: 'border-info-600 text-info-800'
        });
        $('.check-styled-danger').uniform({
            wrapperClass: 'border-danger-600 text-danger-800'
        });

        $('#Branches_Id').val($('#Branch').val()).trigger('change');

        $('.tanggal').daterangepicker({
            singleDatePicker: true,
            timePicker: true,
            timePicker24Hour: true,
            timePickerIncrement: 5,
            locale: {
                format: 'YYYY/MM/DD H:mm'
            }
        });

        $('#Tutor_UserAccounts_Id').select2({
            placeholder: 'Select Tutor',
            ajax: {
                url: '@Url.Action("GetUser", "User")',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        limit: 20,
                        role: 'tutor'
                    }

                    return query;
                }
            },
            //minimumInputLength: 2
        });

        $('#Student_Id').select2({
            placeholder: 'Select Student',
            ajax: {
                url: '@Url.Action("GetUser", "User")',
                data: function (params) {
                    var query = {
                        search: params.term,
                        page: params.page || 1,
                        limit: 20,
                        role: 'student'
                    }

                    return query;
                }
            },
            //minimumInputLength: 2
        });
        
        $('#Student_Id').change(function () {
            $("#SaleInvoiceItems_Id").empty();
            $("#SaleInvoiceItems_Id").append("<option value=''>Select Lesson</option");

            if ($('#Student_Id').val() != '') {
                $.get('@Url.Action("GetLessonList", "LessonSessions")', { student_id: $("#Student_Id").val() }, function (data) {
                    $.each(data.ddl, function (index, row) {
                        $("#SaleInvoiceItems_Id").append("<option value='" + row.Value + "'>" + row.Text + "</option>")
                    });
                });
            }
        });

        @*$('#SaleInvoiceItems_Id').change(function () {
            $("#Tutor_UserAccounts_Id").empty();
            $("#Tutor_UserAccounts_Id").append("<option value=''>Select Tutor</option");

            if ($('#SaleInvoiceItems_Id').val() != '') {
                $.get('@Url.Action("GetTutorList", "LessonSessions")', { sale_invoice_item_id: $("#SaleInvoiceItems_Id").val() }, function (data) {
                    $.each(data.ddl, function (index, row) {
                        $("#Tutor_UserAccounts_Id").append("<option value='" + row.Value + "'>" + row.Text + "</option>")
                    });
                });
            }
        });*@

        $('#btnAdd').click(function () {
            if ($('#Student_Id').val() == '') {
                $('.session-validation').html('The Student field is required.').show();
            }
            else if ($('#SaleInvoiceItems_Id').val() == '') {
                $('.session-validation').html('The Lesson Package field is required.').show();
            }
            else {
                $('.session-validation').html('').hide();
                AddItem($('#Student_Id option:selected').text(), $('#SaleInvoiceItems_Id option:selected').text(), $('#Review').val(), $('#InternalNotes').val(), $('#SaleInvoiceItems_Id').val());
                $('#Student_Id').val('').trigger('change');
            }
        });
        
        $('#target').submit (function (e) {

            var arrItem = [];
            $('#data-body tr').each(function () {
                var student = $(this).find('input.student').val();
                var package = $(this).find('input.package').val();
                var review = $(this).find('input.review').val();
                var internal_notes = $(this).find('input.internal').val();
                var sale_invoice_item_id = $(this).find('input.sii_id').val();

                var obj = { student: student, package: package, review: review, internal_notes: internal_notes, sale_invoice_item_id: sale_invoice_item_id };
                arrItem.push(obj);
            });
            $('#Items').val(JSON.stringify(arrItem));
            $('#ChangeSchedule').val($('#chkChangeSchedule').prop('checked'));
            $('#Waive').val($('#chkWaive').prop('checked'));

            if ($('#Tutor_UserAccounts_Id').val() == null) {
                $('.session-validation').html('The Tutor field is required.').show();
                return false;
            }
            else if ($('#ChangeSchedule').val() == 'true' && $('#Waive').val() == 'true') {
                $('.session-validation').html('Please select one of Change Schedule or Waive Tutor Fee!').show();
                return false;
            }
            else if (arrItem.length == 0) {
                $('.session-validation').html('List Student-Package is required.').show();
                return false;
            }
            else {
                
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("CheckRemainingHour", "LessonSessions")',
                    data: {
                        items: $('#Items').val(),
                        hour: $('#SessionHours').val()
                    },
                    async: false,
                    error: function (result) {
                        bootbox.alert("Error " + result);
                        return false;
                    }, //end error
                    success: function (data) {
                        //console.log(data);
                        if (data.isValid == false) {
                            e.preventDefault();
                            $('.session-validation').html(data.message).show();
                            return false;
                        }
                        else {
                            $('.session-validation').html('').hide();
                            return true;
                        }
                    } //end success
                }); //end ajax

            }
            
        });

    })
</script>