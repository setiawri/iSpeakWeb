@model IEnumerable<iSpeak.Models.SaleInvoicesIndexModels>

@{
    ViewBag.Root = "Sale Invoices";
    ViewBag.Title = "Index";
}

<div class="content-wrapper">

    <!-- Content area -->
    <div class="content">
        <!-- Form inputs -->
        <div class="card animated bounceInLeft">
            <div class="card-header header-elements-inline">
                <h5 class="card-title">@ViewBag.Root</h5>
                <div class="header-elements">
                    <div class="list-icons">
                        <a class="list-icons-item" data-action="collapse"></a>
                        <a class="list-icons-item" data-action="reload"></a>
                        <a class="list-icons-item" data-action="remove"></a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <a href="@Url.Action("Create", "Sale")" class="btn btn-sm btn-success mb-1">Create Invoice <i class="icon-plus22 ml-2"></i></a>
                <button type="button" class="btn btn-sm btn-primary mb-1" id="btnCreate">Create Payment<i class="icon-plus22 ml-2"></i></button>
                <div class="form-check mb-1" style="float: right">
                    @Html.DropDownList("listStatus", new List<SelectListItem>
                    {
                        new SelectListItem { Text = "All Status", Value = "" },
                        new SelectListItem { Text = "Waiting Payment", Value = "Waiting Payment", Selected = true },
                        new SelectListItem { Text = "Completed", Value = "Completed" },
                        new SelectListItem { Text = "Cancelled", Value = "Cancelled" }
                    }, new { @class = "form-control select2" })
                </div>
                @*<div class="form-check mb-1" style="float: right">
                    <label class="form-check-label">
                        <input type="checkbox" id="chkHide" class="check-styled-primary" data-fouc>
                        Show Completed Payment
                    </label>
                </div>*@

                <div class="table-responsive">
                    <table class="table table-hover datatable">
                        <thead>
                            <tr>
                                <th></th>
                                <th>@Html.DisplayNameFor(model => model.Branches)</th>
                                <th>@Html.DisplayNameFor(model => model.No)</th>
                                <th>@Html.DisplayNameFor(model => model.Timestamp)</th>
                                <th>@Html.DisplayNameFor(model => model.Customer)</th>
                                <th>@Html.DisplayNameFor(model => model.Amount)</th>
                                <th>@Html.DisplayNameFor(model => model.Due)</th>
                                <th>Status</th>
                                <th>@Html.DisplayNameFor(model => model.Cancelled)</th>
                                <th>@Html.DisplayNameFor(model => model.IsChecked)</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="data-body">
                            @*@foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @if (item.Due > 0)
                                        {
                                            if (item.Cancelled == true)
                                            {
                                                <span class="text-danger"><i class="icon-cancel-square2"></i></span>
                                            }
                                            else
                                            {
                                                <input type="checkbox" id="@item.Id" class="check-styled" />
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-primary"><i class="icon-checkmark"></i></span>
                                        }
                                    </td>
                                    <td>@Html.DisplayFor(modelItem => item.Branches)</td>
                                    <td>@Html.DisplayFor(modelItem => item.No)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Timestamp)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Customer)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Amount)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Due)</td>
                                    <td>
                                        @if (item.Due > 0)
                                        {
                                            if (item.Cancelled == true)
                                            {
                                                <span class="badge badge-dark d-block">Cancelled</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-warning d-block">Waiting Payment</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge badge-primary d-block">Completed</span>
                                        }
                                    </td>
                                    <td>
                                        @if (item.Cancelled == false) //blm ada pembayaran (bisa cancel)
                                        {
                                            if (item.Amount == item.Due)
                                            {
                                                <a href="#"><span class="badge badge-warning d-block" data-toggle="modal" data-target="#modal_cancel" onclick="Cancel_Modal('@item.Id', '@item.No')">Cancel</span></a>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge badge-flat border-danger d-block text-danger-600">@item.Notes</span>
                                        }
                                    </td>
                                    <td>
                                        @if (item.IsChecked)
                                        {
                                            <a href="#"><span class="badge badge-success d-block" onclick="CancelApprove('@item.Id', '@item.No')">Approved</span></a>
                                        }
                                        else
                                        {
                                            if (item.Due == 0)
                                            {
                                                <a href="#"><span class="badge badge-dark d-block" onclick="Approve('@item.Id', '@item.No')">None</span></a>
                                            }
                                        }
                                    </td>
                                    <td>
                                        <a href="#" onclick="View_Item('@item.Id', '@item.No')">View</a> |
                                        <a href="#" onclick="View_Log('@item.Id')">Log</a>
                                    </td>
                                </tr>
                            }*@
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- /form inputs -->
        <!-- Cancel form modal -->
        <div id="modal_cancel" class="modal fade" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-warning">
                        <h6 class="modal-title">Cancel Sale Invoice</h6>
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                    </div>

                    <form action="#" class="form-horizontal">
                        <div class="modal-body">
                            <label class="modal-validation text-danger" style="display: none"></label>
                            <div style="display: none">
                                <input class="form-control mdl-id-inv" />
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-sm-4">No Invoice</label>
                                <div class="col-sm-8">
                                    <input class="form-control mdl-no-inv" readonly />
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-sm-4">Notes</label>
                                <div class="col-sm-8">
                                    <textarea class="form-control mdl-notes" rows="2" placeholder="Reason Cancel"></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                            <button type="button" class="btn bg-success mdl-btn-submit">Submit</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <!-- /cancel form modal -->
    </div>
    <!-- /content area -->

</div>

<script type="text/javascript">

    // Setting datatable defaults
    $.extend($.fn.dataTable.defaults, {
        autoWidth: false,
        columnDefs: [
            {
                orderable: false,
                width: 50,
                targets: [0]
            },
            {
                orderable: false,
                width: 160,
                targets: [10]
            }
        ],
        dom: '<"datatable-header"fl><"datatable-scroll"t><"datatable-footer"ip>',
        language: {
            search: '<span>Filter:</span> _INPUT_',
            searchPlaceholder: 'Type to filter...',
            lengthMenu: '<span>Show:</span> _MENU_',
            paginate: { 'first': 'First', 'last': 'Last', 'next': $('html').attr('dir') == 'rtl' ? '&larr;' : '&rarr;', 'previous': $('html').attr('dir') == 'rtl' ? '&rarr;' : '&larr;' }
        }
    });

    var table = $('.datatable').DataTable({
        processing: true,
        columns: [
            {
                data: 'Id', render: function (data, type, row) {
                    if (row.Due > 0) {
                        return row.Cancelled == true
                            ? '<span class="text-danger"><i class="icon-cancel-square2"></i></span>'
                            : '<input type="checkbox" class="check-styled" id="' + row.Id + '" />';
                    }
                    else {
                        return '<span class="text-primary"><i class="icon-checkmark"></i></span>';
                    }
                }
            },
            { data: 'Branches' },
            { data: 'No' },
            { data: 'Timestamp' },
            { data: 'Customer' },
            {
                data: 'Amount', render: function (e) {
                    return parseFloat(e).toLocaleString();
                }
            },
            {
                data: 'Due', render: function (e) {
                    return parseFloat(e).toLocaleString();
                }
            },
            {
                data: 'Status', render: function (data, type, row) {
                    if (row.Due > 0) {
                        return row.Cancelled == true
                            ? '<span class="badge badge-dark d-block">Cancelled</span>'
                            : '<span class="badge badge-warning d-block">Waiting Payment</span>';
                    }
                    else {
                        return '<span class="badge badge-primary d-block">Completed</span>';
                    }
                }
            },
            {
                data: 'Cancelled', render: function (data, type, row) {
                    if (row.IsChecked == false) {
                        if (data == false) {
                            return row.Amount == row.Due
                                ? '<a href="javascript:void(0)"><span class="badge badge-warning d-block" data-toggle="modal" data-target="#modal_cancel" onclick="Cancel_Modal(' + "'" + row.Id + "'" + ', ' + "'" + row.No + "'" + ')">Cancel</span></a>'
                                : '';
                        }
                        else {
                            return '<span class="badge badge-flat border-danger d-block text-danger-600">' + row.Notes + '</span>';
                        }
                    }
                    else {
                        return '';
                    }
                }
            },
            {
                data: 'IsChecked', render: function (data, type, row) {
                    if (data == true) {
                        return '<a href="javascript:void(0)"><span class="badge badge-success d-block" onclick="CancelApprove(' + "'" + row.Id + "'" + ', ' + "'" + row.No + "'" + ')">Approved</span></a>';
                    }
                    else {
                        return row.Due == 0
                            ? '<a href="javascript:void(0)"><span class="badge badge-dark d-block" onclick="Approve(' + "'" + row.Id + "'" + ', ' + "'" + row.No + "'" + ')">None</span></a>'
                            : '';
                    }
                }
            },
            {
                data: 'Action', render: function (data, type, row) {
                    var link_log = '@ViewBag.Log' == 'False' ? '' : ' | <a href="' + '@Url.Content("~")' + 'Logs/Index/' + row.Id + '?ctrl=' + '@(this.ViewContext.RouteData.Values["controller"].ToString())' + '&table=SaleInvoices&header=' + row.No + '" target="_blank">Log</a>';
                    return '<a href="javascript:void(0)" onclick="View_Item(' + "'" + row.Id + "'" + ', ' + "'" + row.No + "'" + ')">View</a> | <a href="javascript:void(0)" onclick="View_Log(' + "'" + row.Id + "'" + ')">Payment</a>' + link_log;
                }
            }
        ],
        ajax: {
            url: '@Url.Action("GetData", "Sale")',
            type: 'POST',
            dataType: 'json'
        },
        drawCallback: function (settings) {
            //var response = settings.json;
            //console.log(response);
            $('.check-styled').uniform();
        },
        pagingType: 'full_numbers',
        order: [[3, 'desc'], [2, 'desc']],
        search: {
            search: 'Waiting Payment'
        }
    });

    function View_Item(id, no) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetItem", "Sale")',
            data: {
                id: id
            },
            success: function (data) {
                var dialog = bootbox.alert({
                    title: 'Invoice No: ' + no,
                    size: 'large',
                    message: data.content,
                    backdrop: true
                });
            }, //end success
            error: function (result) {
                bootbox.alert("Error " + result);
            } //end error
        }); //end ajax
    }

    function View_Log(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetPayment", "Payments")',
            data: {
                id: id
            },
            success: function (data) {
                var dialog = bootbox.alert({
                    title: 'Payment Log',
                    size: 'large',
                    message: data.content,
                    backdrop: true
                });
            }, //end success
            error: function (result) {
                bootbox.alert("Error " + result);
            } //end error
        }); //end ajax
    }

    function Cancel_Modal(id, no) {
        $('.mdl-id-inv').val(id);
        $('.mdl-no-inv').val(no);
        $('.mdl-notes').val('');
    }

    function Cancelled(id, notes) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("Cancelled", "Sale")',
            data: {
                id: id,
                notes: notes
            },
            success: function (data) {
                location.reload();
            }, //end success
            error: function (result) {
                bootbox.alert("Error " + result);
            } //end error
        }); //end ajax
    }

    function Approve(id, no) {
        @*bootbox.confirm({
            message: "Are you sure want to approve Sale Invoice No: " + no + " ?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result == true) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Approved", "Sale")',
                        data: {
                            id: id
                        },
                        success: function (data) {
                            location.reload();
                        }, //end success
                        error: function (result) {
                            bootbox.alert("Error " + result);
                        } //end error
                    }); //end ajax
                }
            }
        });*@
        $.ajax({
            type: "POST",
            url: '@Url.Action("Approved", "Sale")',
            data: {
                id: id
            },
            success: function (data) {
                //location.reload();
                table.ajax.reload(null, false);
            }, //end success
            error: function (result) {
                bootbox.alert("Error " + result);
            } //end error
        }); //end ajax
    }

    function CancelApprove(id, no) {
        @*bootbox.confirm({
            message: "Are you sure want to cancel Approve Sale Invoice No: " + no + " ?",
            buttons: {
                confirm: {
                    label: 'Yes',
                    className: 'btn-success'
                },
                cancel: {
                    label: 'No',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result == true) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("CancelApproved", "Sale")',
                        data: {
                            id: id
                        },
                        success: function (data) {
                            location.reload();
                        }, //end success
                        error: function (result) {
                            bootbox.alert("Error " + result);
                        } //end error
                    }); //end ajax
                }
            }
        });*@
        $.ajax({
            type: "POST",
            url: '@Url.Action("CancelApproved", "Sale")',
            data: {
                id: id
            },
            success: function (data) {
                //location.reload();
                table.ajax.reload(null, false);
            }, //end success
            error: function (result) {
                bootbox.alert("Error " + result);
            } //end error
        }); //end ajax
    }

    function Approve_Payment(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("Approved", "Payments")',
            data: {
                id: id
            },
            success: function (data) {
                location.reload();
            }, //end success
            error: function (result) {
                bootbox.alert("Error " + result);
            } //end error
        }); //end ajax
    }

    $(document).ready(function () {
        
        if ('@ViewBag.Cancel' == 'False') {
            table.column(8).visible(false);
        }

        if ('@ViewBag.Approve' == 'False') {
            table.column(9).visible(false);
        }

        $('.select2').select2({
            minimumResultsForSearch: -1
        });

        //$('.check-styled').uniform();
        //$('.check-styled-primary').uniform({
        //    wrapperClass: 'border-primary-600 text-primary-800'
        //});

        $('#listStatus').change(function () {
            if ($('#listStatus').val() == '') {
                $('input[type=search]').val('').keyup();
            }
            else {
                $('input[type=search]').val($('#listStatus').val()).keyup();
            }
        });

        $('#chkHide').click(function () {
            if ($(this).prop('checked') == true) {
                $('input[type=search]').val('Completed').keyup();
            }
            else {
                $('input[type=search]').val('Waiting Payment').keyup();
            }
        });

        $('.mdl-btn-submit').click(function () {
            if ($('.mdl-notes').val() == '') {
                $('.modal-validation').html('The field Notes is required.').show();
            }
            else {
                $('.modal-validation').html('').hide();
                Cancelled($('.mdl-id-inv').val(), $('.mdl-notes').val());
            }
        });

        $('#btnCreate').click(function () {
            var ids_selected = '';
            $('#data-body tr').find('.check-styled').each(function () {
                if ($(this).prop('checked') == true) {
                    ids_selected = $('input:checkbox.check-styled:checked').map(function () {
                        return this.id;
                    }).get();
                }
            });

            if (ids_selected == '') {
                bootbox.alert("Please select Invoice!");
            }
            else {
                var url = '@Url.Action("Create", "Payments", new { id = "_id" })';
                window.location.href = url.replace('_id', ids_selected);
            }
        });
    });
</script>